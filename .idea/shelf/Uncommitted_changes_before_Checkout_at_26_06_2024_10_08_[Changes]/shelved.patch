Index: sys-src/backend/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nfrom sklearn.linear_model import LogisticRegression\r\nimport joblib\r\nimport utils\r\n\r\n\r\n#return the prediction in a correct format \r\ndef create_prediction(home, away, results):\r\n    return {\r\n        \"teams\": [home, away],\r\n        \"probabilities\": {\r\n            \"home\": results[0],\r\n            \"draw\": results[1],\r\n            \"away\": results[2]\r\n        }\r\n    }\r\n\r\n#A very simple AI model that selects the team with the longer name. \r\nclass ModelOne:\r\n\r\n    #Selects the team with the longer name between two teams.\r\n    #Parameters: \r\n    # home: The name of the home team.\r\n    # away: The name of the away team.\r\n    def predict(self, home, away):\r\n        if len(home) > len(away):\r\n            return create_prediction(home, away, [100,0,0])\r\n        elif len(away) > len(home):\r\n            return create_prediction(home, away, [0,0,100])\r\n        else:\r\n            return create_prediction(home, away, [0,100,0])\r\n\r\n\r\n\r\n#First ml-model trained with logistic Regression on our level one dataset (\"data_model_one.csv\")\r\nclass ModelTwo:\r\n\r\n    def __init__(self, trainings_data = \"csv-data/data_model_one.csv\"):\r\n        self.model = LogisticRegression(solver=\"lbfgs\",max_iter=1000)\r\n\r\n        self.columns = pd.read_csv(trainings_data).columns\r\n        self.home_teams = []\r\n        self.away_teams = []\r\n\r\n        for team in self.columns:\r\n            if team.startswith('HT_'):\r\n                self.home_teams.append(team)\r\n            elif team.startswith('AT_'):\r\n                self.away_teams.append(team)\r\n    \r\n\r\n    def train(self, X, y):\r\n        self.model.fit(X, y)\r\n    \r\n\r\n    def accuracy(self, X, y):\r\n        return self.model.score(X,y)\r\n    \r\n\r\n    def predict(self, home, away):\r\n        team_dict_home = {key: False for key in self.home_teams}\r\n        team_dict_away = {key: False for key in self.away_teams}\r\n\r\n        team_dict_home[f\"HT_{home}\"] = True\r\n        team_dict_away[f\"AT_{away}\"] = True\r\n\r\n        db = utils.load_db()\r\n        \r\n        mv_ht = utils.query_market_values(home, db)\r\n        mv_at = utils.query_market_values(away, db)\r\n\r\n        pos_ht = utils.get_current_pos(home)\r\n        pos_at = utils.get_current_pos(away)\r\n\r\n        X = {\"MV_HT\":mv_ht, \"MV_AT\":mv_at, \"POS_HT\":pos_ht, \"POS_AT\":pos_at}\r\n        X.update(team_dict_home)\r\n        X.update(team_dict_away)\r\n\r\n        X = pd.DataFrame(X, index=[0])\r\n\r\n        result = self.model.predict_proba(X)\r\n        return create_prediction(home, away, [result[0][2], result[0][1], result[0][0]])\r\n\r\n\r\n    def load(self, model_file_name = \"model_two.joblib\"):\r\n        try:\r\n            self.model = joblib.load(f\"models/{model_file_name}\")\r\n        except Exception as e:\r\n            print(f\"Exception thrown while loading the model. {e}\")\r\n    \r\n    def save(self, model_file_name = \"model_two.joblib\"):\r\n        try:\r\n            joblib.dump(self.model, f\"models/{model_file_name}\")\r\n        except Exception as e:\r\n            print(f\"Exception thrown while saving the model. {e}\")\r\n\r\n\r\n#TODO:\r\n#Second ml-model trained on our level two dataset\r\nclass ModelThree:\r\n    def __init__(self):\r\n        pass\r\n    \r\n    def train(self, X, y):\r\n        pass\r\n    \r\n    def predict(self, X):\r\n        pass\r\n    \r\n    def load(self, model_file_name = \"model_three.joblib\"):\r\n        pass\r\n\r\n    def save(self, model_file_name = \"model_three.joblib\"):\r\n        pass\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    #Create ModelOne\r\n    \"\"\"\r\n    model_one = ModelOne()\r\n    model_one.predict(\"Bayern\", \"Dortmund\")\r\n    \"\"\"\r\n\r\n    \"\"\"\r\n    #Create ModelTwo\r\n    model_two = ModelTwo()\r\n\r\n    data = pd.read_csv(\"csv-data/data_model_one.csv\",index_col=0)\r\n    df = pd.DataFrame(data)\r\n\r\n    y = df[\"R\"]\r\n    X = df.drop(\"R\", axis=1)\r\n    \r\n    model_two.train(X,y)\r\n\r\n    model_two.save()\r\n    \"\"\"\r\n\r\n    #Load saved ModelTwo\r\n    #print some test predictions\r\n    \"\"\"\r\n    model_two = ModelTwo()\r\n    model_two.load()\r\n    print(model_two.predict(\"1.FC K\\u00f6ln\",\"Borussia Dortmund\"))\r\n    print(model_two.predict(\"Borussia Dortmund\",\"1.FC Köln\"))\r\n    print(model_two.predict(\"FC Bayern München\",\"Borussia Mönchengladbach\"))\r\n    print(model_two.predict(\"Bayer 04 Leverkusen\",\"Borussia Mönchengladbach\"))\r\n    print(model_two.predict(\"FC Bayern München\",\"1.FC Union Berlin\"))\r\n    \"\"\"\r\n
===================================================================
diff --git a/sys-src/backend/models.py b/sys-src/backend/models.py
--- a/sys-src/backend/models.py	
+++ b/sys-src/backend/models.py	
@@ -1,6 +1,8 @@
 import pandas as pd
 from sklearn.linear_model import LogisticRegression
 import joblib
+from sklearn.tree import DecisionTreeClassifier
+
 import utils
 
 
@@ -98,20 +100,60 @@
 #TODO:
 #Second ml-model trained on our level two dataset
 class ModelThree:
-    def __init__(self):
-        pass
+    def __init__(self, trainings_data = "csv-data/data_model_one.csv"):
+        self.model = DecisionTreeClassifier()
+
+        self.columns = pd.read_csv(trainings_data).columns
+        self.home_teams = []
+        self.away_teams = []
+
+        for team in self.columns:
+            if team.startswith('HT_'):
+                self.home_teams.append(team)
+            elif team.startswith('AT_'):
+                self.away_teams.append(team)
     
     def train(self, X, y):
-        pass
+        self.model.fit(X, y)
+
+    def accuracy(self, X, y):
+        return self.model.score(X, y)
     
-    def predict(self, X):
-        pass
+    def predict(self, home, away):
+        team_dict_home = {key: False for key in self.home_teams}
+        team_dict_away = {key: False for key in self.away_teams}
+
+        team_dict_home[f"HT_{home}"] = True
+        team_dict_away[f"AT_{away}"] = True
+
+        db = utils.load_db()
+
+        mv_ht = utils.query_market_values(home, db)
+        mv_at = utils.query_market_values(away, db)
+
+        pos_ht = utils.get_current_pos(home)
+        pos_at = utils.get_current_pos(away)
+
+        X = {"MV_HT": mv_ht, "MV_AT": mv_at, "POS_HT": pos_ht, "POS_AT": pos_at}
+        X.update(team_dict_home)
+        X.update(team_dict_away)
+
+        X = pd.DataFrame(X, index=[0])
+
+        result = self.model.predict_proba(X)
+        return create_prediction(home, away, [result[0][2], result[0][1], result[0][0]])
     
     def load(self, model_file_name = "model_three.joblib"):
-        pass
+        try:
+            self.model = joblib.load(f"models/{model_file_name}")
+        except Exception as e:
+            print(f"Exception thrown while loading the model. {e}")
 
     def save(self, model_file_name = "model_three.joblib"):
-        pass
+        try:
+            joblib.dump(self.model, f"models/{model_file_name}")
+        except Exception as e:
+            print(f"Exception thrown while saving the model. {e}")
 
 
 
@@ -123,8 +165,9 @@
     model_one.predict("Bayern", "Dortmund")
     """
 
-    """
+
     #Create ModelTwo
+    """
     model_two = ModelTwo()
 
     data = pd.read_csv("csv-data/data_model_one.csv",index_col=0)
@@ -136,11 +179,9 @@
     model_two.train(X,y)
 
     model_two.save()
-    """
 
     #Load saved ModelTwo
     #print some test predictions
-    """
     model_two = ModelTwo()
     model_two.load()
     print(model_two.predict("1.FC K\u00f6ln","Borussia Dortmund"))
@@ -148,4 +189,27 @@
     print(model_two.predict("FC Bayern München","Borussia Mönchengladbach"))
     print(model_two.predict("Bayer 04 Leverkusen","Borussia Mönchengladbach"))
     print(model_two.predict("FC Bayern München","1.FC Union Berlin"))
+
+    print(model_two.accuracy(X, y))
     """
+
+    #Create ModelThree
+    model_three = ModelThree()
+
+    data = pd.read_csv("csv-data/data_model_one.csv", index_col=0)
+    df = pd.DataFrame(data)
+
+    y = df["R"]
+    X = df.drop("R", axis=1)
+
+    model_three.train(X, y)
+
+    model_three.save()
+
+    model_three = ModelTwo()
+    model_three.load()
+
+    print(model_three.accuracy(X, y))
+
+
+
