Index: sys-src/backend/webscraping.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nfrom bs4 import BeautifulSoup\r\nimport time\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nimport json\r\n\r\n#link to all the fixtures and results\r\nmatchday_url = \"https://www.transfermarkt.de/bundesliga/gesamtspielplan/wettbewerb/L1\"\r\n\r\n#link to club market values\r\nmarket_value_url = \"https://www.transfermarkt.de/bundesliga/startseite/wettbewerb/L1\"\r\n\r\n#link to the bundesliga matchday table\r\nmatchday_table_url = \"https://www.transfermarkt.de/bundesliga/spieltagtabelle/wettbewerb/L1\"\r\n\r\nbase_url = \"https://www.transfermarkt.de/vergleich/bilanzdetail/verein/{}/gegner_id/{}\"\r\n\r\n#Request-Header\r\nheader = {\r\n\"User-Agent\":\r\n\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n}\r\n\r\nbundesliga_1 = {\"Bayer\": 15, \"Bayern\": 27, \"Stuttgart\": 79, \"Leipzig\": 23826, \"Borussia\": 18, \"Eintracht\": 24, \"Freiburg\": 60, \"Augsburg\": 167, \"Hoffenheim\": 533, \"Heidenheim\": 2036, \"Werder\": 86, \"Wolfsburg\": 82, \"Union\": 89, \"Bochum\": 80, \"Mainz\": 39, \"KÃ¶ln\": 3, \"Darmstadt\": 105}\r\n\r\n\r\n#Returns all available matchday-results [home, draw, away] for a given season\r\n#For the parameter \"season\", the year in which the season started should be specified (e.g., for the 2019-2020 season, \"season\" is equal to 2019) \r\ndef get_matchday_results(season):\r\n\r\n    url = f\"{matchday_url}?saison_id={season}\"\r\n\r\n    data = requests.get(url=url, headers=header)\r\n\r\n    matches = {}\r\n\r\n    if(data.status_code == 200):\r\n        soup = BeautifulSoup(data.text, 'html.parser')\r\n        tables = soup.find_all(\"div\", attrs={\"class\":\"box\"})\r\n\r\n        for table in tables:\r\n            matchday = table.find(\"div\", attrs={\"class\":\"content-box-headline\"})\r\n\r\n            if(matchday is None):\r\n                continue\r\n\r\n            matchday_number = matchday.get_text()\r\n\r\n            matches[matchday_number] = []\r\n\r\n            #list of all tds for the home teams of a matchday\r\n            matchday_home = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"text-right no-border-rechts hauptlink\"})\r\n            #list of all tds for the results of a matchday\r\n            matchday_result = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"zentriert hauptlink\"})\r\n            #list of all tds for the away teams of a matchday\r\n            matchday_away = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"no-border-links hauptlink\"})\r\n\r\n            for i in range(len(matchday_home)):\r\n\r\n                home_team = matchday_home[i].find(\"a\").get(\"title\")\r\n                away_team = matchday_away[i].find(\"a\").get(\"title\")\r\n\r\n                game_result = matchday_result[i].find(\"a\").get_text()\r\n\r\n                game_result = game_result.split(\":\")\r\n\r\n                if(int(game_result[0]) > int(game_result[1])):\r\n                    game_result = \"home\"\r\n                elif(int(game_result[0]) < int(game_result[1])):\r\n                    game_result = \"away\"\r\n                else:\r\n                    game_result = \"draw\"\r\n            \r\n                matches[matchday_number].append([home_team, away_team, game_result])\r\n\r\n        return matches\r\n\r\n    else:\r\n        return f\"Could not process request. Status Code {data.status_code}\"\r\n\r\n\r\n#Returns the market values of all 18 Bundesliga Clubs in a given season (returend as a dict)\r\n#For the parameter \"season\", the year in which the season started should be specified (e.g., for the 2019-2020 season, \"season\" is equal to 2019) \r\ndef get_market_values(season):\r\n\r\n    url = f\"{market_value_url}/plus/?saison_id={season}\"\r\n\r\n    data = requests.get(url=url, headers=header)\r\n\r\n    market_values = {}\r\n\r\n    soup = BeautifulSoup(data.text, 'html.parser')\r\n    table = soup.find(\"table\", attrs={\"class\":\"items\"})\r\n    table_rows = table.find(\"tbody\").find_all(\"tr\")\r\n\r\n    for row in table_rows:\r\n        team = row.find(\"td\", attrs={\"class\":\"hauptlink no-border-links\"}).find(\"a\", title=True).get(\"title\")\r\n        market_value = row.find_all(\"td\", attrs={\"class\":\"rechts\"})[1].find(\"a\", title=True).get_text()\r\n        market_values[team] = market_value.split(\" \")[0].replace(\",\",\".\")\r\n\r\n    return market_values\r\n\r\n\r\n\r\n#Returns the transfermarkt ids of all 18 Bundesliga Clubs in a given season (returend as a dict)\r\n#For the parameter \"season\", the year in which the season started should be specified (e.g., for the 2019-2020 season, \"season\" is equal to 2019) \r\ndef get_transfermarkt_ids(season):\r\n\r\n    url = f\"{market_value_url}/plus/?saison_id={season}\"\r\n\r\n    data = requests.get(url=url, headers=header)\r\n\r\n    ids = {}\r\n\r\n    soup = BeautifulSoup(data.text, 'html.parser')\r\n    table = soup.find(\"table\", attrs={\"class\":\"items\"})\r\n    table_rows = table.find(\"tbody\").find_all(\"tr\")\r\n\r\n    for row in table_rows:\r\n        team = row.find(\"td\", attrs={\"class\":\"hauptlink no-border-links\"}).find(\"a\", title=True).get(\"title\")\r\n        id = row.find(\"td\", attrs={\"class\":\"hauptlink no-border-links\"}).find(\"a\", title=True).get(\"href\")\r\n        ids[team] = int(id.split(\"verein/\")[1].split(\"/\")[0])\r\n\r\n    return ids\r\n\r\n\r\n\r\n#Returns the position of each club BEFORE the given matchday takes place (returned in an array of dicts)\r\n#For the parameter \"season\", the year in which the season started should be specified (e.g., for the 2019-2020 season, \"season\" is equal to 2019)\r\n#The parameter \"spieltag\" determines the number of matchdays displayed.\r\ndef get_matchday_positions(season, spieltage = 34, delay=2):\r\n\r\n    matchday_tables = []\r\n\r\n    #Read the data for each matchday\r\n    for spieltag in range(spieltage):\r\n        url = f\"{matchday_table_url}?saison_id={season}&spieltag={spieltag+1}\"\r\n        \r\n        data = requests.get(url=url, headers=header)\r\n\r\n        soup = BeautifulSoup(data.text, 'html.parser')\r\n        table = soup.find(\"table\", attrs={\"class\":\"items\"})\r\n        table_rows = table.find(\"tbody\").find_all(\"tr\")\r\n\r\n        pos = 1\r\n        matchday_tables.append(dict())\r\n        for row in table_rows:\r\n            club_name = row.find(\"td\", attrs={\"class\":\"no-border-links hauptlink\"}).find(\"a\", title = True).get(\"title\")\r\n            matchday_tables[spieltag][club_name] = pos\r\n            pos += 1\r\n        \r\n        time.sleep(delay)\r\n\r\n    #In order to get the position of each club BEFORE the matchday --> Shift the array forward by one position\r\n    first_element = dict(matchday_tables[0])\r\n    for key in first_element.keys():\r\n        first_element[key]= 9\r\n\r\n    matchday_tables.insert(0,first_element)\r\n    matchday_tables.pop()\r\n\r\n    return matchday_tables\r\n\r\n\r\n#Returns list with the name of the winner from two selected teams of last 'n' games between them\r\n#Parameter n: number of games\r\n#Parameter team_a, team_b = names of the teams\r\ndef find_n_last_games(team_a, team_b, n):\r\n    try:\r\n        a = bundesliga_1[team_a]\r\n        b = bundesliga_1[team_b]\r\n\r\n        this_url = base_url.format(a, b)\r\n\r\n        response = requests.get(this_url, headers=header)\r\n        response.raise_for_status()  # Raise an exception for bad status codes\r\n        soup = BeautifulSoup(response.content, \"html.parser\")\r\n    except requests.exceptions.RequestException as e:\r\n        print(\"Error fetching data:\", e)\r\n\r\n    # getting the table with the results between the teams\r\n    table = soup.select_one('table[class=\"items\"]')\r\n    tr_elements = table.find_all('tr')\r\n    data = []\r\n\r\n    for tr in tr_elements:\r\n        td_elements = tr.find_all('td')\r\n        td_row = []\r\n        for td in td_elements:\r\n            td_row.append(td.text.strip())\r\n        data.append(td_row)\r\n\r\n    data = [[elem for elem in row if elem.strip()] for row in data]\r\n    data = data[1:]\r\n    data = [row for row in data if len(row) >= 5]\r\n    data = data[:n]\r\n\r\n    winners = []\r\n    for row in data:\r\n        result = row[7].split(':')\r\n        if int(result[0]) > int(result[1]):\r\n            winners.append(team_a)\r\n        elif int(result[0]) < int(result[1]):\r\n            winners.append(team_b)\r\n        else:\r\n            winners.append(\"Draw\")\r\n\r\n    return winners\r\n\r\n#Returns dictionary with the final position of the teams from last season\r\ndef get_last_season_positions(season):\r\n    last_season_tabelle_url = \"https://www.transfermarkt.de/bundesliga/tabelle/wettbewerb/L1/saison_id/{}/plus/1\"\r\n    url = last_season_tabelle_url.format(season)\r\n\r\n    data = requests.get(url=url, headers=header)\r\n    soup = BeautifulSoup(data.text, 'html.parser')\r\n    table = soup.find(\"table\", attrs={\"class\": \"items\"})\r\n    table_rows = table.find(\"tbody\").find_all(\"tr\")\r\n\r\n    positions = {}\r\n\r\n    for row in table_rows:\r\n        team_name = row.find(\"td\", attrs={\"class\": \"no-border-links hauptlink\"}).find(\"a\", title=True).get(\"title\")\r\n        team_position = row.find(\"td\", attrs={\"class\": \"rechts hauptlink\"}).get_text(strip=True)\r\n        positions[team_name] = team_position\r\n\r\n    return positions\r\n\r\n\r\n#Get all games played with results and date of a season\r\n#Parameter \"season\" determines the year / season \r\ndef get_complete_matchday_data(season):\r\n\r\n    url = f\"{matchday_url}?saison_id={season}\"\r\n\r\n    data = requests.get(url=url, headers=header)\r\n\r\n    matches = []\r\n\r\n    if(data.status_code == 200):\r\n        soup = BeautifulSoup(data.text, 'html.parser')\r\n        tables = soup.find_all(\"div\", attrs={\"class\":\"box\"})\r\n\r\n        for table in tables:\r\n            matchday = table.find(\"div\", attrs={\"class\":\"content-box-headline\"})\r\n\r\n            if(matchday is None):\r\n                continue\r\n\r\n            #list of all tds for the home teams of a matchday\r\n            matchday_home = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"text-right no-border-rechts hauptlink\"})\r\n            #list of all tds for the results of a matchday\r\n            matchday_result = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"zentriert hauptlink\"})\r\n            #list of all tds for the away teams of a matchday\r\n            matchday_away = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"no-border-links hauptlink\"})\r\n            #list of all date tds\r\n            matchday_dates = matchday.parent.find(\"tbody\").find_all(\"td\", attrs={\"class\":\"show-for-small\", \"colspan\":\"7\"})\r\n\r\n            for i in range(len(matchday_home)):\r\n\r\n                home_team = matchday_home[i].find(\"a\").get(\"title\")\r\n                away_team = matchday_away[i].find(\"a\").get(\"title\")\r\n\r\n                game_result = matchday_result[i].find(\"a\").get_text()\r\n\r\n                game_result = game_result.split(\":\")\r\n\r\n                date = matchday_dates[0].find(\"a\").get_text()\r\n\r\n                matches.append([home_team, away_team, game_result[0], game_result[1], date])\r\n        return matches\r\n    else:\r\n        return f\"Could not process request. Status Code {data.status_code}\"\r\n\r\n\r\n\r\n#Get all games played within a given time range\r\n#Save the data into a csv file\r\n#Parameter season_range: range of seasons \"a-b\", a inclusive, b exclusive  (e.g \"2017-2024\")\r\ndef generate_matchdata_csv(season_range):\r\n    try:\r\n        season_range = season_range.split(\"-\")\r\n        if(len(season_range) != 2):\r\n            raise ValueError(f\"Invalid param season_range {season_range}\")\r\n        if(int(season_range[0]) < 2000):\r\n            raise ValueError(f\"Invalid param season_range {season_range}. Do not enter values before the year 2000.\")\r\n        if(int(season_range[1]) > datetime.now().year):\r\n            raise ValueError(f\"Invalid param season_range {season_range}. Do not enter values after the year {datetime.now().year}.\")\r\n\r\n    except Exception as e:\r\n        print(f\"Exception thrown: {e}\")\r\n        return\r\n\r\n    data = []\r\n\r\n    for i in range(int(season_range[0]), int(season_range[1])):\r\n        season_matches = get_complete_matchday_data(i)\r\n\r\n        for season_match in season_matches:\r\n            data.append(season_match)\r\n\r\n    df = pd.DataFrame(data,columns = [\"Home_Team\",\"Away_Team\",\"Goals_Home\",\"Goals_Away\",\"Date\"])\r\n    df[\"Date\"] = pd.to_datetime(df['Date'])\r\n    df.to_csv(f\"csv-data/matchdata_{season_range[0]}-{season_range[1]}.csv\")\r\n    return df\r\n\r\n\r\n#Get all games played within a given time range\r\n#Save the data into a json file\r\n#Parameter season_range: range of seasons \"a-b\", a inclusive, b exclusive  (e.g \"2017-2024\")\r\ndef generate_matchdata_json(season_range):\r\n    try:\r\n        season_range = season_range.split(\"-\")\r\n        if(len(season_range) != 2):\r\n            raise ValueError(f\"Invalid param season_range {season_range}\")\r\n        if(int(season_range[0]) < 2000):\r\n            raise ValueError(f\"Invalid param season_range {season_range}. Do not enter values before the year 2000.\")\r\n        if(int(season_range[1]) > datetime.now().year):\r\n            raise ValueError(f\"Invalid param season_range {season_range}. Do not enter values after the year {datetime.now().year}.\")\r\n\r\n    except Exception as e:\r\n        print(f\"Exception thrown: {e}\")\r\n        return\r\n\r\n    data = []\r\n\r\n    for i in range(int(season_range[0]), int(season_range[1])):\r\n        season_matches = get_complete_matchday_data(i)\r\n\r\n        for season_match in season_matches:\r\n            data.append({\"Home\":season_match[0], \"Away\":season_match[1], \"Goals_Home\":season_match[2], \"Goals_Away\":season_match[3], \"Date\":season_match[4]})\r\n\r\n    json_data = json.dumps(data, indent=4)\r\n    with open(f\"json-data/matchdata_{season_range[0]}-{season_range[1]}.json\", 'w') as json_file:\r\n        json_file.write(json_data)\r\n    return json_data\r\n\r\n\r\n#Create a dataframe out of all Bundesliga teams and their market values\r\n#Parameter \"season\" determines the year / season \r\ndef generate_mv_csv(season):\r\n    data = get_market_values(season)\r\n    df = pd.DataFrame(columns=[\"Teams\",\"MarketValues\"])\r\n    df[\"Teams\"] = list(data.keys())\r\n    df[\"MarketValues\"] = list(data.values())\r\n    df.to_csv('csv-data/club_values.csv')\r\n    return df\r\n\r\n\r\n#Create a json file including all Bundesliga teams, their market values, and their transfermarkt ids\r\n#Parameter \"season\" determines the year / season\r\ndef generate_team_json(season):\r\n    mv_data = get_market_values(season)\r\n    id_data = get_transfermarkt_ids(season)\r\n\r\n    data = []\r\n\r\n    for key in mv_data.keys():\r\n        data.append({\"Team\":key ,\"Market_Value\":mv_data[key], \"ID\": id_data[key]})\r\n    \r\n\r\n    json_data = json.dumps(data, indent=4)\r\n    with open(f\"json-data/{season}_teams.json\", 'w') as json_file:\r\n        json_file.write(json_data)\r\n    return json_data\r\n\r\n\r\n\r\n\r\n#Create a dataframe out of the scraped data for our first ml-model\r\n#Save the data as a csv (local or in s3-bucket)\r\ndef create_dataframe_model_one(local:bool):\r\n    content = []\r\n    for season in range(2014,2024):\r\n        matches = get_matchday_results(season)\r\n        club_values = get_market_values(season)\r\n        matchday_positions = get_matchday_positions(season)\r\n\r\n\r\n        for key in matches.keys():\r\n            games_played = matches[key]\r\n\r\n            for game in games_played:\r\n\r\n                home_team = game[0]\r\n                away_team = game[1]\r\n                result = game[2]\r\n\r\n                mv_home_team = club_values[home_team]\r\n                mv_away_team = club_values[away_team]\r\n\r\n                matchday_index = int(str(key).split(\".\")[0])-1\r\n                pos_home_team = matchday_positions[matchday_index][home_team]\r\n                pos_away_team = matchday_positions[matchday_index][away_team]\r\n\r\n                content.append([home_team, away_team, result, mv_home_team, mv_away_team, pos_home_team, pos_away_team])\r\n\r\n    df = pd.DataFrame(content)\r\n    df.columns = [\"HT\",\"AT\",\"R\",\"MV_HT\",\"MV_AT\",\"POS_HT\",\"POS_AT\"]\r\n    df = pd.get_dummies(df, columns=[\"HT\", \"AT\"])\r\n    if(local):\r\n        save_df_to_csv(df)\r\n    else:\r\n        #save to s3 bucket\r\n        save_df_in_s3()\r\n    return df\r\n\r\n\r\n#Save the dataframe to a csv file\r\ndef save_df_to_csv(df, path = 'csv-data/data_model_one.csv'):\r\n    df.to_csv(path)\r\n\r\n\r\n#Save the dataframe as a csv in a s3-bucket\r\ndef save_df_in_s3():\r\n    pass\r\n\r\n\r\ndef create_dataframe_model_two(start_season, end_season):\r\n    all_data = []\r\n\r\n    for season in range(start_season, end_season + 1):\r\n        # Fetch data\r\n        matchday_results = get_matchday_results(season)\r\n        market_values = get_market_values(season)\r\n        matchday_positions = get_matchday_positions(season, 34, 2)\r\n        last_season_positions = get_last_season_positions(season - 1)\r\n\r\n        data = []\r\n\r\n        for matchday, matches in matchday_results.items():\r\n            matchday_number = int(matchday.split('.')[0])\r\n            positions = matchday_positions[matchday_number - 1]\r\n\r\n            for match in matches:\r\n                home_team, away_team, result = match\r\n                home_market_value = market_values.get(home_team, 'NA')\r\n                away_market_value = market_values.get(away_team, 'NA')\r\n                home_position = positions.get(home_team, 'NA')\r\n                away_position = positions.get(away_team, 'NA')\r\n                home_position_last_season = last_season_positions.get(home_team, 'NA')\r\n                away_position_last_season = last_season_positions.get(away_team, 'NA')\r\n\r\n                data.append({\r\n                    'Matchday': matchday_number,\r\n                    'Home_Team': home_team,\r\n                    'Away_Team': away_team,\r\n                    'Result': result,\r\n                    'Home_Market_Value': home_market_value,\r\n                    'Away_Market_Value': away_market_value,\r\n                    'Home_Position': home_position,\r\n                    'Away_Position': away_position,\r\n                    'Home_Position_Last_Season': home_position_last_season,\r\n                    'Away_Position_Last_Season': away_position_last_season\r\n                })\r\n\r\n        # Add the current season to all seasons data\r\n        all_data += data\r\n\r\n    # Create DataFrame\r\n    df = pd.DataFrame(all_data)\r\n\r\n    # Save DataFrame as CSV\r\n    # df.to_csv(f'bundesliga_season_{season}.csv', index=False)\r\n\r\n    return df\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"generate_matchdata_csv(\"2000-2024\")\r\n    generate_mv_csv(2023)\r\n    create_dataframe_model_one(True)\"\"\"\r\n\r\n    \"\"\"\r\n    generate_matchdata_json(\"2000-2024\")\r\n    generate_team_json(2023)\r\n    \"\"\"\r\n\r\n\r\n# MÃ¶gliche Erweiterungen:\r\n# 1) create_dataframe is slow (get_matchday_positions)\r\n# 2) add more features: billanz, last results\r\n\r\n
===================================================================
diff --git a/sys-src/backend/webscraping.py b/sys-src/backend/webscraping.py
--- a/sys-src/backend/webscraping.py	
+++ b/sys-src/backend/webscraping.py	
@@ -482,3 +482,5 @@
 # 1) create_dataframe is slow (get_matchday_positions)
 # 2) add more features: billanz, last results
 
+#print(get_matchday_results(2020))
+
